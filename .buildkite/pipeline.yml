steps:
  - label: "Julia v1"
    plugins:
      - JuliaCI/julia#v1:
          version: "1"
      - JuliaCI/julia-test#v1: ~
      - JuliaCI/julia-coverage#v1:
          codecov: true
    agents:
      queue: "juliagpu"
      cuda: "*"
    if: build.message !~ /\[skip tests\]/
    timeout_in_minutes: 30

  - label: "Pluto Example Notebook"
    plugins:
      - JuliaCI/julia#v1:
          version: "1"
    agents:
      queue: "juliagpu"
      cuda: "*"
    commands: |
      julia -e 'import Pkg
        tmpenv = mktempdir()
        Pkg.activate(tmpenv)
        Pkg.add([
          Pkg.PackageSpec(name="PlutoSliderServer", version="0.3.2-0.3"),
          Pkg.PackageSpec(name="Documenter", version="0.27"),
          Pkg.PackageSpec(name="Pluto"),
        ])

        import Pluto
        Pluto.PkgUtils.activate_notebook("examples/notebook.jl")
        Pkg.add([Pkg.PackageSpec(path=pwd())])
        Pkg.activate(tmpenv)

        import PlutoSliderServer
        PlutoSliderServer.github_action("examples";
          Export_cache_dir="pluto_state_cache",
          Export_baked_notebookfile=false,
          Export_baked_state=false,
          # more parameters can go here
        )
        using Documenter
        deploydocs(;
          repo="github.com/JuliaLabs/AztecDiamonds.jl",
          devbranch="main",
          dirname="examples",
          target="examples",
          forcepush=true,
        )'
    if: build.message !~ /\[skip tests\]/
    timeout_in_minutes: 30

env:
  SECRET_CODECOV_TOKEN: "MLMmNsIi9z+5uGcjkWJXY8ZGbQC1srQhklvMP2IjZlNP53569OKThGRgV9Lkc6s589VcADNKx6lwPc/1YQZBCT7ES40tRKmf5kPn5QVuAZOENfVyIvu3T1Q71vzHL1/XvZoEkMqCmmHKb+orBJbwm8mSzWTMN+ta7fl2Wa0ZJc4gV/dYyeAceiuqXe9S7BCUN/VHJub/4ftEdH11Z1FG9t9SmnOgVU8ZzCdCgelWx5FwosADfuZJsDPLgz4dkhgFgHLxytr+1a9gI680MhfnLBZPg5fEs4TOU3D4Nrxbsnmf0zwX8KHvNrgi5YEcnEy7WddHA36T7LhHCrsmnCuybQ==;U2FsdGVkX1+DQcFB9i6MzGvFWP6yNN5kv42uXHdspYN+8BEj+42qrS85E5yB3G/frbu53SfPP4DfMRx/VQdOpQ=="
  SECRET_DOCUMENTER_KEY: "nBFQr0zOYL6aXsMoG2V8VLeStqtqVRYmepdM6b1G/oHbWlBxhARyGc39XLZDJUBIbMfXvMhp0HSU8lwYdRdKxuwVHA09lupXGNrRUgo6OKe9UTmGVjtJ3GEvzu7ch8VVI4ZavMO/dOzB2yoxqXnhAWBKDM0WGhfJJwrXxLuJa+uaphuzVWiTl7V1cw3Q7km8irwgA9EDDixD2W/yhEXhCDBQvOwLAvAHOrk2oBcAEpqxpP1Ix/y2Z5dNp0wjypQdVYoGiR/Ws9CyfTX8FJb/ybAuwT6dnc3OnNtccQs8zBFRFMtoRWfgBegUZYlps+muSTOhf+0Sp4gij7UFfHwt5Q==;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"
